{
  "results": {
    "leaderboard_math_hard": {
      "exact_match,none": 0.08836858006042296,
      "exact_match_stderr,none": 0.007531506708682463,
      "alias": "leaderboard_math_hard"
    },
    "leaderboard_math_algebra_hard": {
      "exact_match,none": 0.13680781758957655,
      "exact_match_stderr,none": 0.019644839884927125,
      "alias": " - leaderboard_math_algebra_hard"
    },
    "leaderboard_math_counting_and_prob_hard": {
      "exact_match,none": 0.04065040650406504,
      "exact_match_stderr,none": 0.017878907564437475,
      "alias": " - leaderboard_math_counting_and_prob_hard"
    },
    "leaderboard_math_geometry_hard": {
      "exact_match,none": 0.022727272727272728,
      "exact_match_stderr,none": 0.01302104690906372,
      "alias": " - leaderboard_math_geometry_hard"
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "exact_match,none": 0.014285714285714285,
      "exact_match_stderr,none": 0.00710435089391533,
      "alias": " - leaderboard_math_intermediate_algebra_hard"
    },
    "leaderboard_math_num_theory_hard": {
      "exact_match,none": 0.07142857142857142,
      "exact_match_stderr,none": 0.020820824576076338,
      "alias": " - leaderboard_math_num_theory_hard"
    },
    "leaderboard_math_prealgebra_hard": {
      "exact_match,none": 0.23834196891191708,
      "exact_match_stderr,none": 0.03074890536390988,
      "alias": " - leaderboard_math_prealgebra_hard"
    },
    "leaderboard_math_precalculus_hard": {
      "exact_match,none": 0.044444444444444446,
      "exact_match_stderr,none": 0.017802636020324572,
      "alias": " - leaderboard_math_precalculus_hard"
    }
  },
  "groups": {
    "leaderboard_math_hard": {
      "exact_match,none": 0.08836858006042296,
      "exact_match_stderr,none": 0.007531506708682463,
      "alias": "leaderboard_math_hard"
    }
  },
  "group_subtasks": {
    "leaderboard_math_hard": [
      "leaderboard_math_geometry_hard",
      "leaderboard_math_prealgebra_hard",
      "leaderboard_math_num_theory_hard",
      "leaderboard_math_algebra_hard",
      "leaderboard_math_counting_and_prob_hard",
      "leaderboard_math_intermediate_algebra_hard",
      "leaderboard_math_precalculus_hard"
    ]
  },
  "configs": {
    "leaderboard_math_algebra_hard": {
      "task": "leaderboard_math_algebra_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "algebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c041726560>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_counting_and_prob_hard": {
      "task": "leaderboard_math_counting_and_prob_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "counting_and_probability",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c0416ebf40>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_geometry_hard": {
      "task": "leaderboard_math_geometry_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "geometry",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c04177dfc0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "task": "leaderboard_math_intermediate_algebra_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "intermediate_algebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c0416e9750>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_num_theory_hard": {
      "task": "leaderboard_math_num_theory_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "number_theory",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c041759630>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_prealgebra_hard": {
      "task": "leaderboard_math_prealgebra_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "prealgebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c04175b760>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_precalculus_hard": {
      "task": "leaderboard_math_precalculus_hard",
      "group": [
        "leaderboard_math_hard"
      ],
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "precalculus",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    # print everything\n    print('candidates:', candidates)\n    print('unnormalized_answer:', unnormalized_answer)\n    print('answer:', answer)\n    print('doc[\"answer\"]:', doc[\"answer\"])\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x14c06ff529e0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:",
          "Question:",
          "</s>",
          "<|im_end|>"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "leaderboard_math_algebra_hard": 1.0,
    "leaderboard_math_counting_and_prob_hard": 1.0,
    "leaderboard_math_geometry_hard": 1.0,
    "leaderboard_math_intermediate_algebra_hard": 1.0,
    "leaderboard_math_num_theory_hard": 1.0,
    "leaderboard_math_prealgebra_hard": 1.0,
    "leaderboard_math_precalculus_hard": 1.0
  },
  "n-shot": {
    "leaderboard_math_algebra_hard": 4,
    "leaderboard_math_counting_and_prob_hard": 4,
    "leaderboard_math_geometry_hard": 4,
    "leaderboard_math_hard": 4,
    "leaderboard_math_intermediate_algebra_hard": 4,
    "leaderboard_math_num_theory_hard": 4,
    "leaderboard_math_prealgebra_hard": 4,
    "leaderboard_math_precalculus_hard": 4
  },
  "higher_is_better": {
    "leaderboard_math_algebra_hard": {
      "exact_match": true
    },
    "leaderboard_math_counting_and_prob_hard": {
      "exact_match": true
    },
    "leaderboard_math_geometry_hard": {
      "exact_match": true
    },
    "leaderboard_math_hard": {
      "exact_match": true
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "exact_match": true
    },
    "leaderboard_math_num_theory_hard": {
      "exact_match": true
    },
    "leaderboard_math_prealgebra_hard": {
      "exact_match": true
    },
    "leaderboard_math_precalculus_hard": {
      "exact_match": true
    }
  },
  "n-samples": {
    "leaderboard_math_geometry_hard": {
      "original": 132,
      "effective": 132
    },
    "leaderboard_math_prealgebra_hard": {
      "original": 193,
      "effective": 193
    },
    "leaderboard_math_num_theory_hard": {
      "original": 154,
      "effective": 154
    },
    "leaderboard_math_algebra_hard": {
      "original": 307,
      "effective": 307
    },
    "leaderboard_math_counting_and_prob_hard": {
      "original": 123,
      "effective": 123
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "original": 280,
      "effective": 280
    },
    "leaderboard_math_precalculus_hard": {
      "original": 135,
      "effective": 135
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=/fast/groups/sf/ttt/models/e3/gsm8kaux/llama-2-70b,trust_remote_code=True,parallelize=True",
    "model_num_parameters": 68976648192,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "",
    "batch_size": "1",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "b745683",
  "date": 1719945832.057151,
  "pretty_env_info": "PyTorch version: 2.1.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: version 3.29.2\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-5.15.0-89-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.1.105\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA H100 80GB HBM3\nGPU 1: NVIDIA H100 80GB HBM3\nGPU 2: NVIDIA H100 80GB HBM3\n\nNvidia driver version: 545.23.08\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      52 bits physical, 57 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             384\nOn-line CPU(s) list:                1-8\nOff-line CPU(s) list:               0,9-383\nVendor ID:                          AuthenticAMD\nModel name:                         AMD EPYC 9654 96-Core Processor\nCPU family:                         25\nModel:                              17\nThread(s) per core:                 2\nCore(s) per socket:                 96\nSocket(s):                          2\nStepping:                           1\nFrequency boost:                    enabled\nCPU max MHz:                        3707.8120\nCPU min MHz:                        1500.0000\nBogoMIPS:                           4800.32\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate ssbd mba ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local avx512_bf16 clzero irperf xsaveerptr rdpru wbnoinvd amd_ppin cppc arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif v_spec_ctrl avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid overflow_recov succor smca fsrm flush_l1d\nVirtualization:                     AMD-V\nL1d cache:                          6 MiB (192 instances)\nL1i cache:                          6 MiB (192 instances)\nL2 cache:                           192 MiB (192 instances)\nL3 cache:                           768 MiB (24 instances)\nNUMA node(s):                       2\nNUMA node0 CPU(s):                  0-95,192-287\nNUMA node1 CPU(s):                  96-191,288-383\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Not affected\nVulnerability Retbleed:             Not affected\nVulnerability Spec rstack overflow: Mitigation; safe RET\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:           Mitigation; Retpolines, IBPB conditional, IBRS_FW, STIBP always-on, RSB filling, PBRSB-eIBRS Not affected\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Not affected\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.26.3\n[pip3] torch==2.1.1+cu121\n[pip3] triton==2.1.0\n[conda] Could not collect",
  "transformers_version": "4.41.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "</s>",
    2
  ],
  "tokenizer_eos_token": [
    "</s>",
    2
  ],
  "tokenizer_bos_token": [
    "<s>",
    1
  ],
  "eot_token_id": 2,
  "max_length": 2048,
  "task_hashes": {
    "leaderboard_math_geometry_hard": "1a492e91976f9e7c5daccc72c66bfa576cd9780f83ecc6e67e17217e18c3a554",
    "leaderboard_math_prealgebra_hard": "9ef24704b69e3c33249c7e809dd8e61cfb78e5177570e41b5d34b6005b3011ce",
    "leaderboard_math_num_theory_hard": "7f65c2ec65fd4834ee008ccab31440562b027edbe3961368234fe495c4723b05",
    "leaderboard_math_algebra_hard": "d4fdf1e475f97b5de546797eaa1618578400c573995854960177d2f44a62e813",
    "leaderboard_math_counting_and_prob_hard": "bde2a6c82b859d9aff4e0d9e5c0ed0ac82fc00a5c0c29edab046d0ee1dca48f5",
    "leaderboard_math_intermediate_algebra_hard": "7f298254524d2aa249fc72631cb69e931649e378f2a47b0c7670caf19bda028f",
    "leaderboard_math_precalculus_hard": "61dedec56e88debfd9deebd6dd8cad195363c50d9a03048ae4e21647bff2c1ef"
  },
  "model_source": "hf",
  "model_name": "/fast/groups/sf/ttt/models/e3/gsm8kaux/llama-2-70b",
  "model_name_sanitized": "__fast__groups__sf__ttt__models__e3__gsm8kaux__llama-2-70b",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 1580147.974912994,
  "end_time": 1606191.636865862,
  "total_evaluation_time_seconds": "26043.66195286787"
}